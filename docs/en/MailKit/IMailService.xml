<Type Name="IMailService" FullName="MailKit.IMailService">
  <TypeSignature Language="C#" Value="public interface IMailService : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMailService implements class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>MailKit</AssemblyName>
    <AssemblyVersion>0.92.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            An interface for message services such as SMTP, POP3, or IMAP.
            </summary>
    <remarks>
            Implemented by <see cref="T:MailKit.Net.Smtp.SmtpClient" />
            and <see cref="T:MailKit.Net.Pop3.Pop3Client" />.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public void Authenticate (System.Net.ICredentials credentials, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Authenticate(class System.Net.ICredentials credentials, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.92.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credentials" Type="System.Net.ICredentials" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="credentials">The user's credentials.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Authenticate using the supplied credentials.
            </summary>
        <remarks>
            If the service supports authentication, then the credentials are used
            to authenticate. Otherwise, this method simply returns.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task AuthenticateAsync (System.Net.ICredentials credentials, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsync(class System.Net.ICredentials credentials, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.92.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credentials" Type="System.Net.ICredentials" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="credentials">The user's credentials.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Asynchronously authenticate using the supplied credentials.
            </summary>
        <returns>An asynchronous task context.</returns>
        <remarks>
          <para>If the server supports one or more SASL authentication mechanisms, then
            the SASL mechanisms that both the client and server support are tried
            in order of greatest security to weakest security. Once a SASL
            authentication mechanism is found that both client and server support,
            the credentials are used to authenticate.</para>
          <para>If the server does not support SASL or if no common SASL mechanisms
            can be found, then the default login command is used as a fallback.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credentials" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailService" /> has been disposed.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailService" /> is not connected or is already authenticated.
            </exception>
        <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
        <exception cref="T:MailKit.Security.AuthenticationException">
            Authentication using the supplied credentials has failed.
            </exception>
        <exception cref="T:MailKit.Security.SaslException">
            A SASL authentication error occurred.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Authenticated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MailKit.AuthenticatedEventArgs&gt; Authenticated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MailKit.AuthenticatedEventArgs&gt; Authenticated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.92.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MailKit.AuthenticatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Occurs when the client has been successfully authenticated.
            </summary>
        <remarks>
            The <see cref="E:MailKit.IMailService.Authenticated" /> event is raised whenever the client
            has been authenticated.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationMechanisms">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.HashSet&lt;string&gt; AuthenticationMechanisms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.HashSet`1&lt;string&gt; AuthenticationMechanisms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.92.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.HashSet&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get the authentication mechanisms supported by the message service.
            </summary>
        <value>The supported authentication mechanisms.</value>
        <remarks>
            The authentication mechanisms are queried durring the
            <see cref="M:MailKit.IMailService.Connect(System.Uri,System.Threading.CancellationToken)" /> method.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientCertificates">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.92.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509CertificateCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set the client SSL certificates.
            </summary>
        <value>The client SSL certificates.</value>
        <remarks>
          <para>Some servers may require the client SSL certificates in order
            to allow the user to connect.</para>
          <para>This property should be set before calling <see cref="M:MailKit.IMailService.Connect(System.Uri,System.Threading.CancellationToken)" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (Uri uri, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Connect(class System.Uri uri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.92.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="uri">The server URI.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Connect to the server specified in the URI.
            </summary>
        <remarks>
            If a successful connection is made, the <see cref="P:MailKit.IMailService.AuthenticationMechanisms" />
            property will be populated.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync (Uri uri, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ConnectAsync(class System.Uri uri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.92.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="uri">The server URI.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Asynchronously connect to the specified mail server.
            </summary>
        <returns>An asynchronous task context.</returns>
        <remarks>
            Asynchronously connects to the specified mail server.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="uri" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentException">
            The <paramref name="uri" /> is not an absolute URI.
            </exception>
        <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailService" /> has been disposed.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailService" /> is already connected.
            </exception>
        <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Connected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;EventArgs&gt; Connected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.EventArgs&gt; Connected" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.92.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.EventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Occurs when the client has been successfully connected.
            </summary>
        <remarks>
            The <see cref="E:MailKit.IMailService.Connected" /> event is raised when the client
            successfully connects to the mail server.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Disconnect">
      <MemberSignature Language="C#" Value="public void Disconnect (bool quit, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Disconnect(bool quit, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.92.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quit" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="quit">If set to <c>true</c>, a "QUIT" command will be issued in order to disconnect cleanly.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Disconnect the service.
            </summary>
        <remarks>
            If <paramref name="quit" /> is <c>true</c>, a "QUIT" command will be issued in order to disconnect cleanly.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisconnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DisconnectAsync (bool quit, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DisconnectAsync(bool quit, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.92.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quit" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="quit">If set to <c>true</c>, a logout/quit command will be issued in order to disconnect cleanly.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Asynchronously disconnect the service.
            </summary>
        <returns>An asynchronous task context.</returns>
        <remarks>
            If <paramref name="quit" /> is <c>true</c>, a logout/quit command will be issued in order to disconnect cleanly.
            </remarks>
        <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailService" /> has been disposed.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Disconnected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;EventArgs&gt; Disconnected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.EventArgs&gt; Disconnected" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.92.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.EventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Occurs when the client has been disconnected.
            </summary>
        <remarks>
            The <see cref="E:MailKit.IMailService.Disconnected" /> event is raised whenever the client
            has been disconnected.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConnected">
      <MemberSignature Language="C#" Value="public bool IsConnected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConnected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.92.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get whether or not the service is currently connected.
            </summary>
        <value>
          <c>true</c> if the service connected; otherwise, <c>false</c>.</value>
        <remarks>
            Gets whether or not the service is currently connected.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NoOp">
      <MemberSignature Language="C#" Value="public void NoOp (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NoOp(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.92.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Ping the message service to keep the connection alive.
            </summary>
        <remarks>
            Mail servers, if left idle for too long, will automatically drop the connection.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NoOpAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task NoOpAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task NoOpAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.92.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Asynchronously ping the mail server to keep the connection alive.
            </summary>
        <returns>An asynchronous task context.</returns>
        <remarks>
            Mail servers, if left idle for too long, will automatically drop the connection.
            </remarks>
        <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailService" /> has been disposed.
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <para>The <see cref="T:MailKit.IMailService" /> is not connected.</para>
          <para>-or-</para>
          <para>The <see cref="T:MailKit.IMailService" /> is not authenticated.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        <exception cref="T:MailKit.CommandException">
            The command was rejected by the mail server.
            </exception>
        <exception cref="T:MailKit.ProtocolException">
            The server responded with an unexpected token.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.92.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets an object that can be used to synchronize access to the folder.
            </summary>
        <value>The sync root.</value>
        <remarks>
            Gets an object that can be used to synchronize access to the folder.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public int Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.92.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set the timeout for network streaming operations, in milliseconds.
            </summary>
        <value>The timeout in milliseconds.</value>
        <remarks>
            Gets or sets the underlying socket stream's <see cref="P:System.IO.Stream.ReadTimeout" />
            and <see cref="P:System.IO.Stream.WriteTimeout" /> values.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
